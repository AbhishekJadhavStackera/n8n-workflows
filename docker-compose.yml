x-shared: &shared
  restart: always
  image: docker.n8n.io/n8nio/n8n
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_PORT=5432
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
    - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
    - NODE_ENV=production
    - EXECUTIONS_MODE=queue
    - QUEUE_BULL_REDIS_HOST=redis
    - QUEUE_HEALTH_CHECK_ACTIVE=true
    - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
    - N8N_BASIC_AUTH_ACTIVE=true
    - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
    - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
    - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
    - N8N_PROTOCOL=http
    - WEBHOOK_URL=http://${SUBDOMAIN}.${DOMAIN_NAME}
    - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
    - N8N_API_KEY=${N8N_API_KEY}
    - N8N_RUNNERS_ENABLED=true
    - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
  links:
    - postgres
    - redis
  volumes:
    - n8n_storage:/home/node/.n8n
    - ./n8n-files:/files
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    container_name: postgres
    image: postgres:17-alpine
    restart: always
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_NON_ROOT_USER=${POSTGRES_NON_ROOT_USER}
      - POSTGRES_NON_ROOT_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
    volumes:
      - db_storage:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}' ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n-network

  redis:
    container_name: redis
    image: redis:7-alpine
    restart: always
    command: redis-server --appendonly yes
    ports:
      - 6379:6379
    volumes:
      - redis_storage:/data
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n-network

  n8n:
    <<: *shared
    container_name: n8n
    ports:
      - 5678:5678
    networks:
      - n8n-network

  n8n-worker:
    <<: *shared
    container_name: n8n-worker
    command: worker
    depends_on:
      - n8n
    networks:
      - n8n-network

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: dev
    restart: always
    environment:
      - WATCHPACK_POLLING=true
      - NEXT_WEBPACK_USEPOLLING=1
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_N8N_HOST=${NEXT_PUBLIC_N8N_HOST}
      - NEXT_PUBLIC_N8N_API_URL=${NEXT_PUBLIC_N8N_API_URL}
      - NEXT_PUBLIC_N8N_WEBHOOK_URL=${NEXT_PUBLIC_N8N_WEBHOOK_URL}
      - N8N_API_KEY=${N8N_API_KEY}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - 3000:3000
    depends_on:
      - n8n
    networks:
      - n8n-network

volumes:
  db_storage:
  n8n_storage:
  redis_storage:


networks:
  n8n-network:
    driver: bridge
